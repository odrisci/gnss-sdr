; Default configuration file
; You can define your own receiver and invoke it by doing
; gnss-sdr --config_file=my_GNSS_SDR_configuration.conf
; vim: set ft=dosini :

[GNSS-SDR]

;######### GLOBAL OPTIONS ##################
;internal_fs_hz: Internal signal sampling frequency after the signal conditioning stage [Hz].
;GNSS-SDR.internal_fs_hz=15000000
GNSS-SDR.internal_fs_hz=60000000

;Galileo.prns=11,12,19,20
;GPS.prns=5,7,12,15,17,29,31,25,1,24,27,30,6,9,3,26
GPS.prns=1,27
;######### CONTROL_THREAD CONFIG ############
ControlThread.wait_for_flowgraph=false

;######### SUPL RRLP GPS assistance configuration #####
; Check http://www.mcc-mnc.com/
; On Android: https://play.google.com/store/apps/details?id=net.its_here.cellidinfo&hl=en
;GNSS-SDR.SUPL_gps_enabled=false
;GNSS-SDR.SUPL_read_gps_assistance_xml=true
;GNSS-SDR.SUPL_gps_ephemeris_server=supl.nokia.com
;GNSS-SDR.SUPL_gps_ephemeris_port=7275
;GNSS-SDR.SUPL_gps_acquisition_server=supl.google.com
;GNSS-SDR.SUPL_gps_acquisition_port=7275
;GNSS-SDR.SUPL_MCC=244
;GNSS-SDR.SUPL_MNS=5
;GNSS-SDR.SUPL_LAC=0x59e2
;GNSS-SDR.SUPL_CI=0x31b0

;######### SIGNAL_SOURCE CONFIG ############
;#implementation: Use [File_Signal_Source] or [UHD_Signal_Source] or [GN3S_Signal_Source] (experimental)
SignalSource.implementation=File_Signal_Source

;#filename: path to file with the captured GNSS signal samples to be processed
;SignalSource.filename=/Users/Cillian/Work/Data/ID 89.25/Simulator Data 2015.10/ID89_16bits.bin
SignalSource.implementation=Two_Bit_Packed_File_Signal_Source

;#filename: path to file with the captured GNSS signal samples to be processed
SignalSource.filename=/home/cillian/Data/2015.09.24/150924-1450.datz

;#item_type: Type and resolution for each of the signal samples. Use only gr_complex in this version.
SignalSource.item_type=short

;#sampling_frequency: Original Signal sampling frequency in [Hz]
SignalSource.sampling_frequency=60000000

;#freq: RF front-end center frequency in [Hz]
SignalSource.freq=1575468750

;#samples: Number of samples to be processed. Notice that 0 indicates the entire file.
;SignalSource.samples=3000000000
SignalSource.samples=0

;#repeat: Repeat the processing file. Disable this option in this version
SignalSource.repeat=false

;#dump: Dump the Signal source data to a file. Disable this option in this version
SignalSource.dump=false

SignalSource.dump_filename=./signal_source.dat


;#enable_throttle_control: Enabling this option tells the signal source to keep the delay between samples in post processing.
; it helps to not overload the CPU, but the processing time will be longer.
SignalSource.enable_throttle_control=false

SignalSource.sample_type=qi
SignalSource.big_endian_items=false
SignalSource.big_endian_bytes=true
SignalSource.seconds_to_skip=2.0



;######### SIGNAL_CONDITIONER CONFIG ############
;## It holds blocks to change data type, filter and resample input data.

;#implementation: Use [Pass_Through] or [Signal_Conditioner]
;#[Pass_Through] disables this block and the [DataTypeAdapter], [InputFilter] and [Resampler] blocks
;#[Signal_Conditioner] enables this block. Then you have to configure [DataTypeAdapter], [InputFilter] and [Resampler] blocks
SignalConditioner.implementation=Signal_Conditioner
;SignalConditioner.implementation=Pass_Through

;######### DATA_TYPE_ADAPTER CONFIG ############
;## Changes the type of input data. Please disable it in this version.
;#implementation: [Pass_Through] disables this block
;DataTypeAdapter.implementation=Pass_Through
DataTypeAdapter.implementation=Ibyte_To_Complex
;DataTypeAdapter.implementation=Pass_Through
DataTypeAdapter.item_type=gr_complex
DataTypeAdapter.dump=false;
DataTypeAdapter.dump_filename=./data_type_adapter.bin

;######### INPUT_FILTER CONFIG ############
;## Filter the input data. Can be combined with frequency translation for IF signals

;#implementation: Use [Pass_Through] or [Fir_Filter] or [Freq_Xlating_Fir_Filter]
;#[Pass_Through] disables this block
;#[Fir_Filter] enables a FIR Filter
;#[Freq_Xlating_Fir_Filter] enables FIR filter and a composite frequency translation that shifts IF down to zero Hz.

;InputFilter.implementation=Fir_Filter
;InputFilter.implementation=Freq_Xlating_Fir_Filter
InputFilter.implementation=Pass_Through

;#dump: Dump the filtered data to a file.
InputFilter.dump=false

;#dump_filename: Log path and filename.
InputFilter.dump_filename=./input_filter.dat

;#The following options are used in the filter design of Fir_Filter and Freq_Xlating_Fir_Filter implementation.
;#These options are based on parameters of gnuradio's function: gr_remez.
;#These function calculates the optimal (in the Chebyshev/minimax sense) FIR
;#filter inpulse reponse given a set of band edges, the desired reponse on those bands, and the weight given to the error in those bands.

;#input_item_type: Type and resolution for input signal samples. Use only gr_complex in this version.
InputFilter.input_item_type=gr_complex

;#outut_item_type: Type and resolution for output filtered signal samples. Use only gr_complex in this version.
InputFilter.output_item_type=gr_complex

;#taps_item_type: Type and resolution for the taps of the filter. Use only float in this version.
InputFilter.taps_item_type=float

;#number_of_taps: Number of taps in the filter. Increasing this parameter increases the processing time
InputFilter.number_of_taps=21


;#number_of _bands: Number of frequency bands in the filter.
InputFilter.number_of_bands=2

;#bands: frequency at the band edges [ b1 e1 b2 e2 b3 e3 ...].
;#Frequency is in the range [0, 1], with 1 being the Nyquist frequency (Fs/2)
;#The number of band_begin and band_end elements must match the number of bands

InputFilter.band1_begin=0.0
InputFilter.band1_end=0.1
InputFilter.band2_begin=0.15
InputFilter.band2_end=1.0

;#ampl: desired amplitude at the band edges [ a(b1) a(e1) a(b2) a(e2) ...].
;#The number of ampl_begin and ampl_end elements must match the number of bands

InputFilter.ampl1_begin=1.0
InputFilter.ampl1_end=1.0
InputFilter.ampl2_begin=0.0
InputFilter.ampl2_end=0.0

;#band_error: weighting applied to each band (usually 1).
;#The number of band_error elements must match the number of bands
InputFilter.band1_error=1.0
InputFilter.band2_error=1.0

;#filter_type: one of "bandpass", "hilbert" or "differentiator"
InputFilter.filter_type=bandpass

;#grid_density: determines how accurately the filter will be constructed.
;The minimum value is 16; higher values are slower to compute the filter.
InputFilter.grid_density=16

;#The following options are used only in Freq_Xlating_Fir_Filter implementation.
;#InputFilter.IF is the intermediate frequency (in Hz) shifted down to zero Hz

InputFilter.sampling_frequency=60000000
InputFilter.IF=-48750.0



;######### RESAMPLER CONFIG ############
;## Resamples the input data.

;#implementation: Use [Pass_Through] or [Direct_Resampler]
;#[Pass_Through] disables this block
;#[Direct_Resampler] enables a resampler that implements a nearest neigbourhood interpolation
;Resampler.implementation=Direct_Resampler
Resampler.implementation=Pass_Through

;#dump: Dump the resamplered data to a file.
Resampler.dump=false
;#dump_filename: Log path and filename.
Resampler.dump_filename=./resampler.dat

;#item_type: Type and resolution for each of the signal samples. Use only gr_complex in this version.
Resampler.item_type=gr_complex
;Resampler.item_type=cbyte

;#sample_freq_in: the sample frequency of the input signal
Resampler.sample_freq_in=60000000

;#sample_freq_out: the desired sample frequency of the output signal
Resampler.sample_freq_out=6000000


;######### CHANNELS GLOBAL CONFIG ############
;#count: Number of available GPS L1 C/A satellite channels.
Channels_1C.count=1
;#count: Number of available Galileo E1B satellite channels.
Channels_1B.count=0
;#in_acquisition: Number of channels simultaneously acquiring for the whole receiver
Channels.in_acquisition=1


;#if the option is disabled by default is assigned "1C" GPS L1 C/A
Channel.signal=1C


;######### SPECIFIC CHANNELS CONFIG ######
;#The following options are specific to each channel and overwrite the generic options

;######### CHANNEL 0 CONFIG ############
Channel0.signal=1C
Channel0.satellite=27
;Channel1.signal=1C
;Channel1.satellite=1
;Channel2.signal=1B
;Channel2.satellite=19
;Channel3.signal=1B
;Channel3.satellite=20


;######### ACQUISITION GLOBAL CONFIG ############

;#dump: Enable or disable the acquisition internal data file logging [true] or [false] 
Acquisition_1C.dump=false
;#filename: Log path and filename
Acquisition_1C.dump_filename=./Dump/acq_dump.dat
;#item_type: Type and resolution for each of the signal samples. Use only gr_complex in this version.
Acquisition_1C.item_type=gr_complex
;#if: Signal intermediate frequency in [Hz] 
Acquisition_1C.ifreq=-48750.0
;#sampled_ms: Signal block duration for the acquisition signal detection [ms]
Acquisition_1C.sampled_ms=1
;#implementation: Acquisition algorithm selection for this channel: [GPS_L1_CA_PCPS_Acquisition] or [Galileo_E1_PCPS_Ambiguous_Acquisition]
Acquisition_1C.implementation=GPS_L1_CA_PCPS_Acquisition
;#threshold: Acquisition threshold
;Acquisition_1C.threshold=0.002
;Acquisition_1C.threshold=0.000000008
;#pfa: Acquisition false alarm probability. This option overrides the threshold option. Only use with implementations: [GPS_L1_CA_PCPS_Acquisition] or [Galileo_E1_PCPS_Ambiguous_Acquisition] 
Acquisition_1C.pfa=0.000000002
;#doppler_max: Maximum expected Doppler shift [Hz]
Acquisition_1C.doppler_max=5000
;#doppler_max: Maximum expected Doppler shift [Hz]
Acquisition_1C.doppler_min=-5000
;#doppler_step Doppler step in the grid search [Hz]
Acquisition_1C.doppler_step=150
;#maximum dwells
Acquisition_1C.max_dwells=5


;######### TRACKING GLOBAL CONFIG ############

;#implementation: Selected tracking algorithm: [GPS_L1_CA_DLL_PLL_Tracking] or [GPS_L1_CA_DLL_FLL_PLL_Tracking] or [GPS_L1_CA_TCP_CONNECTOR_Tracking] or [Galileo_E1_DLL_PLL_VEML_Tracking]
;Tracking_1C.implementation=GPS_L1_CA_DLL_PLL_Tracking
;;#item_type: Type and resolution for each of the signal samples. Use only [gr_complex] in this version.
;Tracking_1C.item_type=gr_complex

;;#sampling_frequency: Signal Intermediate Frequency in [Hz] 
;Tracking_1C.if=-48750.0

;;#dump: Enable or disable the Tracking internal binary data file logging [true] or [false] 
;Tracking_1C.dump=true

;;#dump_filename: Log path and filename. Notice that the tracking channel will add "x.dat" where x is the channel number.
;Tracking_1C.dump_filename=./Dump/epl_tracking_ch_

;;#pll_bw_hz: PLL loop filter bandwidth [Hz]
;Tracking_1C.pll_initial_bw_hz=45.0;
;Tracking_1C.pll_final_bw_hz=10.0;
;Tracking_1C.pll_loop_order=3;

;;#dll_bw_hz: DLL loop filter bandwidth [Hz]
;Tracking_1C.dll_initial_bw_hz=4.0;
;Tracking_1C.dll_final_bw_hz=1.0;
;Tracking_1C.dll_loop_order=1;

;Tracking_1C.aid_code_with_carrier=true;

;#order: PLL/DLL loop filter order [2] or [3]

;#implementation: Selected tracking algorithm: [GPS_L1_CA_DLL_PLL_Tracking] or [GPS_L1_CA_DLL_FLL_PLL_Tracking] or [GPS_L1_CA_TCP_CONNECTOR_Tracking] or [Galileo_E1_DLL_PLL_VEML_Tracking]
Tracking_1C.implementation=GPS_L1_MCode_Codeless_Tracking
;#item_type: Type and resolution for each of the signal samples. Use only [gr_complex] in this version.
Tracking_1C.item_type=gr_complex

;#sampling_frequency: Signal Intermediate Frequency in [Hz] 
Tracking_1C.if=-48750.0

;#dump: Enable or disable the Tracking internal binary data file logging [true] or [false] 
Tracking_1C.dump=true

Tracking_1C.dump_filename=./Dump/mcode_codeless_tracking_ch_

;#pll_bw_hz: PLL loop filter bandwidth [Hz]
Tracking_1C.pll_loop_order=3;
Tracking_1C.pll_initial_bw_hz=15.0;
Tracking_1C.pll_final_bw_hz=10.0;

;#dll_bw_hz: DLL loop filter bandwidth [Hz]
Tracking_1C.dll_loop_order=1;
Tracking_1C.dll_initial_bw_hz=3.0;
Tracking_1C.dll_final_bw_hz=1.0;


Tracking_1C.aid_code_with_carrier=true;
Tracking_1C.use_bump_jumping=false;
Tracking_1C.bump_jumping_threshold=60;
Tracking_1C.mcode_accumulation_length=100;

Tracking_1C.initial_divergence_bw_hz=0.1
Tracking_1C.final_divergence_bw_hz=0.1


;#early_late_space_chips: correlator early-late space [chips]. Use [0.5] for GPS and [0.15] for Galileo
Tracking_1C.initial_early_late_code_space_chips=0.5;
Tracking_1C.final_early_late_code_space_chips=0.125;

;#very_early_late_space_chips: only for [Galileo_E1_DLL_PLL_VEML_Tracking], correlator very early-late space [chips]. Use [0.6]
Tracking_1C.initial_very_early_late_code_space_chips=0.25;
Tracking_1C.final_very_early_late_code_space_chips=0.25;

Tracking_1C.close_mcode_loops=true;
Tracking_1C.pll_bw_hz_mcode=0.1
Tracking_1C.dll_bw_hz_mcode=0.1



;######### TELEMETRY DECODER GPS CONFIG ############
;#implementation: Use [GPS_L1_CA_Telemetry_Decoder] for GPS L1 C/A
TelemetryDecoder_1C.implementation=GPS_L1_CA_Telemetry_Decoder
TelemetryDecoder_1C.dump=false
;#decimation factor
TelemetryDecoder_1C.decimation_factor=1;

TelemetryDecoder_1B.implementation=Galileo_E1B_Telemetry_Decoder
TelemetryDecoder_1B.dump=false
;######### OBSERVABLES CONFIG ############
;#implementation: Use [GPS_L1_CA_Observables] for GPS L1 C/A.
Observables.implementation=GPS_L1_CA_Observables

;#dump: Enable or disable the Observables internal binary data file logging [true] or [false]
Observables.dump=true

;#dump_filename: Log path and filename.
Observables.dump_filename=./observables.dat


;######### PVT CONFIG ############
;#implementation: Position Velocity and Time (PVT) implementation algorithm: Use [GPS_L1_CA_PVT] in this version.
PVT.implementation=GPS_L1_CA_PVT

;#averaging_depth: Number of PVT observations in the moving average algorithm
PVT.averaging_depth=10

;#flag_average: Enables the PVT averaging between output intervals (arithmetic mean) [true] or [false]
PVT.flag_averaging=false

;#output_rate_ms: Period between two PVT outputs. Notice that the minimum period is equal to the tracking integration time (for GPS CA L1 is 1ms) [ms]
PVT.output_rate_ms=1000

;#display_rate_ms: Position console print (std::out) interval [ms]. Notice that output_rate_ms<=display_rate_ms.
PVT.display_rate_ms=1000

;# RINEX, KML, and NMEA output configuration

;#dump_filename: Log path and filename without extension. Notice that PVT will add ".dat" to the binary dump and ".kml" to GoogleEarth dump.
PVT.dump_filename=./PVT

;#nmea_dump_filename: NMEA log path and filename
PVT.nmea_dump_filename=./gnss_sdr_pvt.nmea;

;#flag_nmea_tty_port: Enable or disable the NMEA log to a serial TTY port (Can be used with real hardware or virtual one)
PVT.flag_nmea_tty_port=true;

;#nmea_dump_devname: serial device descriptor for NMEA logging
PVT.nmea_dump_devname=/dev/pts/4


;#dump: Enable or disable the PVT internal binary data file logging [true] or [false]
PVT.dump=false

;######### OUTPUT_FILTER CONFIG ############
;# Receiver output filter: Leave this block disabled in this version
OutputFilter.implementation=Null_Sink_Output_Filter
OutputFilter.filename=data/gnss-sdr.dat
OutputFilter.item_type=gr_complex
